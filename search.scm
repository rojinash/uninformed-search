#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 65 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1154 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; File"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;   search.scm"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Authors"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   Jerod Weinman "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;     search 6Ps"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;     breadth-first-search 6Ps"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;     depth-first-search 6Ps and implementation "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;     uniform-cost-search 6Ps and implementation"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;     depth-limited-search 6Ps"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Summary"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;   Provides a collection of routines finding solutions to search s"
 #"pace problem"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Provides"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;   (search start-state problem enqueue heuristic)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;   (breadth-first-search start-state problem)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;   (depth-first-search start-state problem)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;   (uniform-cost-search start-state problem)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;   (depth-limited-search start-state problem)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;   (iterative-deepening-search start-state problem)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"node.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"problem.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"sort.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"jump.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;   search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;   Search a problem for a solution according to a specific enqueue"
 #"ing method"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   problem, a problem"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   enqueue, a procedure"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;   heuristic, a procedure"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;   enqueue takes a list of nodes to enqueue, a queue (list) of nod"
 #"es, and "
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";;      produces an updated queue of nodes"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;   heuristic takes a state (of problem) and produces a non-negativ"
 #"e number"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   state from start-state or #f if no solution could be found, and"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;   num-expansions is a number indicating the number of times"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;   problem-expand-node is called."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; YOUR SEARCH HERE"
0 0 24 29 1 #"\n"
0 9         451 4           0 0           0 74 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-helper"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expansions"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"goal-state?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-state"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 20 #"node-extract-actions"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 14 3 10 #"expansions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"search-helper"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 10 #"expansions"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"enqueue"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 19 #"problem-expand-node"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 9 #"heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 8 #"frontier"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"search"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #" "
0 0 14 3 7 #"enqueue"
0 0 24 3 1 #" "
0 0 14 3 9 #"heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 11 #"goal-state?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 4 #") (("
0 0 14 3 13 #"problem-goal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 13 #"search-helper"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expansions"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                  ()"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"goal-state?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-state"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 20 #"node-extract-actions"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 3 #")) "
0 0 14 3 10 #"expansions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 13 #"search-helper"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 10 #"expansions"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 7 #"enqueue"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 19 #"problem-expand-node"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #") "
0 0 14 3 9 #"heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 8 #"))))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"search-helper"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-init"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 9 #"heuristic"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   breadth-first-search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;   Find a solution to a problem using breadth-first search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;   problem, a problem (list)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;   [No additional.]"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   state from start-state, or #f if no solution could be found"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;   (length solution) is minimal for start-state"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"breadth-first-search"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 11 #"start-state"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"problem"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 23 #";; Enqueueing procedure"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 70
(
 #";; Heuristic procedure -- always produces zero since DFS is uninform"
 #"ed"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   depth-first-search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;   Find a solution to a problem using depth-first search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   problem, a problem"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;   "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   state from start-state, or #f if no solution could be found"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"depth-first-search"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 11 #"start-state"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"problem"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 23 #";; Enqueueing procedure"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 70
(
 #";; Heuristic procedure -- always produces zero since DFS is uninform"
 #"ed"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   depth-limited-search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;   Find a solution to a problem using depth-limited search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   problem, a problem"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;   limit, an integer"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;   limit >= 0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   state from start-state, or #f if no solution could be found"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;   (length solution) <= limit "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         433 4           0 0           0 71 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"dls-enque-proc"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 14 #"node-path-cost"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 3 #")) "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"dls-enque-proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 2 #") "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"dls-enque-proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 2 #") "
0 0 14 3 8 #"frontier"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"depth-limited-search"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 14 #"dls-enque-proc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 8 #"frontier"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 8 #"frontier"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 14 #"node-path-cost"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 3 #")) "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 14 #"dls-enque-proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 2 #") "
0 0 14 3 8 #"frontier"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 14 #"dls-enque-proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-nodes"
0 0 24 3 2 #") "
0 0 14 3 8 #"frontier"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"search"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 11 #"start-state"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 7 #"problem"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 23 #";; Enqueueing procedure"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 14 #"dls-enque-proc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 70
(
 #";; Heuristic procedure -- always produces zero since DFS is uninform"
 #"ed"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #";;   uniform-cost-search"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 59
#";;   Find a solution to a problem using uniform-cost search"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 30 #";;   problem, a problem (list)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";;   [None]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 64
#";;   state from start-state, or #f if no solution could be found"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";; Practica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 76
(
 #";;   We could simply call list-key-insertion-sort for each of the ne"
 #"w-nodes "
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 76
(
 #";;   given to the enqueue procedure. However, because all nodes in t"
 #"he queue"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 75
(
 #";;   will already be sorted, it is more efficient for us to do our o"
 #"wn mini"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 42 #";;   insertion sort on the node-path-cost."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"uniform-cost-search"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"search"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 11 #"start-state"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 7 #"problem"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 22 #";; Enqueuing procedure"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-nodes"
0 0 24 3 1 #" "
0 0 14 3 12 #"sorted-queue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 48 #";; Sort the new new nodes according to path cost"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 15 #"sorted-children"
0 0 24 3 2 #" ("
0 0 14 3 25 #"list-keyed-insertion-sort"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 9 #"new-nodes"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 14 #"node-path-cost"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 2 #"<="
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 68
#";; Insert the new nodes efficiently into the already-sorted frontier"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"insert"
0 0 24 3 3 #" (("
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 15 #"sorted-children"
0 0 24 3 2 #") "
0 0 17 3 18 #";; Items to insert"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"queue"
0 0 24 3 1 #" "
0 0 14 3 12 #"sorted-queue"
0 0 24 3 9 #"))       "
0 0 17 3 23 #";; List of sorted nodes"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 17 3 26 #";; Nothing left to insert?"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 5 #"queue"
0 0 24 3 2 #") "
0 0 17 3 37 #";; Return the queue (which is sorted)"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #") "
0 0 17 3 50 #";; If the queue is empty, we can simply return the"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"remaining"
0 0 24 3 7 #")      "
0 0 17 3 50 #";; remaining items, because they're already sorted"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 14 #"node-path-cost"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 4 #"))  "
0 0 17 3 21 #";; Compare path costs"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 14 #"node-path-cost"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 17 3 43 #";; List of the first remaining item and the"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 5 #"queue"
0 0 24 3 4 #"))) "
0 0 17 3 28 #";;  rest inserted into queue"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 2 #") "
0 0 17 3 47 #";; List of the queue front and insert remaining"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"queue"
0 0 24 3 9 #")))))))) "
0 0 17 3 22 #";;  into rest of queue"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 21 #";; Heuristic function"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))) "
0 0 17 3 36 #";; No heuristic function to speak of"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;   iterative-deepening-search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   Find a solution to a problem using iterative deepening search"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;   start-state, a value"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   problem, a problem"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Produces"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;   result, a list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Preconditions"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;  [No Additional]"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Postconditions"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;   result is a list of the form (solution num-expansions), where"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;   solution is a list of actions that can be taken to reach a goal"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   state from start-state, or #f if no solution could be found"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;   (length solution) <= limit"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"iterative-deepening-search"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 2 #"(["
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 3 #"sol"
0 0 24 3 6 #"  ()])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 20 #"depth-limited-search"
0 0 24 3 1 #" "
0 0 14 3 11 #"start-state"
0 0 24 3 1 #" "
0 0 14 3 7 #"problem"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 3 #"sol"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"      ("
0 0 17 3 2 #"if"
0 0 17 3 3 #" (("
0 0 17 3 3 #"not"
0 0 17 3 1 #"("
0 0 17 3 5 #"null?"
0 0 17 3 22 #" (depth-limited-search"
0 0 17 3 20 #" start-state problem"
0 0 17 3 1 #" "
0 0 17 3 8 #"limit)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 31 #"          (depth-limited-search"
0 0 17 3 1 #" "
0 0 17 3 11 #"start-state"
0 0 17 3 1 #" "
0 0 17 3 7 #"problem"
0 0 17 3 1 #" "
0 0 17 3 6 #"limit)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 16 #"jump-start-state"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfs-sol"
0 0 24 3 2 #" ("
0 0 14 3 18 #"depth-first-search"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 12 #"jump-problem"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfs-sol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfs-sol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"bfs-sol"
0 0 24 3 2 #" ("
0 0 14 3 20 #"breadth-first-search"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 12 #"jump-problem"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bfs\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"bfs-sol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"bfs-sol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"dls-sol"
0 0 24 3 2 #" ("
0 0 14 3 20 #"depth-limited-search"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 12 #"jump-problem"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"dls\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"dls-sol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"dls-sol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"ids-sol"
0 0 24 3 2 #" ("
0 0 14 3 26 #"iterative-deepening-search"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 12 #"jump-problem"
0 0 24 3 1 #" "
0 0 14 3 13 #"course-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"ids\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"ids-sol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"ids-sol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0           0
